%{
open FSharp.Text.Parsing
open Ast
open Symbol

let getPos (parseState: IParseState) lexIdx =
    let pos = parseState.InputStartPosition lexIdx
    (pos.Line + 1, pos.Column)

%}

// Token definitions

%start start
%token TYPE VAR FUNCTION INT STRING ARRAY OF NIL LET IN END IF THEN ELSE WHILE DO FOR TO BREAK
%token LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET DOT COMMA COLON SEMICOLON
%token PLUS MINUS TIMES DIV ASSIGN EQ NE GT LT GE LE AND OR

// Tokens associated with types
%token <string> ID
%token <string> STRING_LIT
%token <System.Int32> INT_LIT

%token EOF

// Means whole program is just an expression
%type < Ast.Expr > start

// Operator priority
%left ASSIGN
%left OR
%left AND
%nonassoc EQ NE LT LE GT GE
%left PLUS MINUS
%left TIMES DIV

%nonassoc THEN
%nonassoc ELSE
%nonassoc DO

%nonassoc LPAREN RPAREN

%%

// Grammer rules

start: Expr EOF { $1 }

BinOp: PLUS { PlusOp }
     | MINUS { MinusOp }
     | TIMES { TimesOp }
     | DIV { DivideOp }
     | EQ { EqOp }
     | NE { NeOp }
     | GT { GtOp }
     | GE { GeOp }
     | LT { LtOp }
     | LE { LeOp }

Variable: ID { SimpleVar (symbol $1, (getPos parseState 1)) }
        | VariableCont { $1 }

VariableCont:
            | ID DOT ID { FieldVar (SimpleVar (symbol $1, getPos parseState 1), symbol $3, getPos parseState 3) }
            | VariableCont DOT ID { FieldVar ($1, symbol $3, getPos parseState 3) }
            | ID LBRACKET Expr RBRACKET { SubscriptVar (SimpleVar (symbol $1, getPos parseState 1), $3, getPos parseState 3) }
            | VariableCont LBRACKET Expr RBRACKET { SubscriptVar ($1, $3, getPos parseState 3) }


TypeId: ID { $1 }
      | INT { "int" }
      | STRING { "string" }

Expr: STRING_LIT { StringExpr($1, getPos parseState 1) }
    | INT_LIT { IntExpr($1) }
    | NIL { NilExpr }
    | LPAREN RPAREN { UnitExpr }
    | LPAREN Expr RPAREN { $2 }
    | Variable { VarExpr($1) }
    | MINUS Expr %prec TIMES { OpExpr {left=(IntExpr 0); oper=MinusOp; right=$2; pos=(getPos parseState 1)} }
    | Expr BinOp Expr %prec PLUS { OpExpr {left=$1; oper=$2; right=$3; pos=(getPos parseState 1)} }
    | Variable ASSIGN Expr { AssignExpr {var=$1; exp=$3; pos=(getPos parseState 1)} }
    | ID LPAREN ExprList RPAREN { CallExpr {func=symbol $1; args=List.rev($3); pos=(getPos parseState 1)} }
    | LPAREN ExprSeq RPAREN { SeqExpr($2) }
    | ID LBRACE FieldList RBRACE { RecordExpr {fields=$3; typ=symbol $1; pos=(getPos parseState 1)} }
    | ID LBRACKET Expr RBRACKET OF Expr %prec ASSIGN { ArrayExpr {typ=symbol $1; size=$3; init=$6; pos=(getPos parseState 1)} }
    | IF Expr THEN Expr ELSE Expr { IfExpr {test=$2; then'=$4; else'=Some $6; pos=(getPos parseState 1)} }
    | IF Expr THEN Expr { IfExpr {test=$2; then'=$4; else'=None; pos=(getPos parseState 1)} }
    | WHILE Expr DO Expr { WhileExpr {test=$2; body=$4; pos=(getPos parseState 1)} }
    | FOR ID ASSIGN Expr TO Expr DO Expr { ForExpr {var=symbol $2; escape=ref true; lo=$4; hi=$6; body=$8; pos=(getPos parseState 1)} }
    | BREAK { BreakExpr (getPos parseState 1) }
    | LET DecList IN Expr END { LetExpr {decs=$2; body= $4; pos=(getPos parseState 1)} }
    | Expr AND Expr { IfExpr {test=$1; then'=$3; else'=Some (IntExpr 0); pos=(getPos parseState 2)} }
    | Expr OR Expr { IfExpr {test=$1; then'=(IntExpr 1); else'=Some $3; pos=(getPos parseState 2)} }

// Function call argument list
ExprList: { [] }
        | Expr { [ $1 ] }
        | ExprList COMMA Expr { $3 :: $1 }

// Sequence of expressions
ExprSeq: Expr SEMICOLON Expr { [ ($3, getPos parseState 3); ($1, getPos parseState 1) ] }
       | ExprSeq SEMICOLON Expr { ($3, getPos parseState 3) :: $1 }

// Record creation
FieldList: { [] }
         | ID EQ Expr { [(symbol $1, $3, getPos parseState 1)] }
         | FieldList COMMA ID EQ Expr { (symbol $3, $5, getPos parseState 3) :: $1 }

DecList: { [] }
       | VarDec DecList { $1 :: $2 }
       | TypeDec DecList {
           match $2 with
           | [] -> (TypeDec [ $1 ]) :: $2
           | h :: t -> match h with
                       | TypeDec lst -> TypeDec ($1::lst) :: t
                       | _ -> (TypeDec [$1]) :: $2
       }
       | FuncDec DecList {
           match $2 with
           | [] -> (FunctionDec [ $1 ]) :: $2
           | h :: t -> match h with
                       | FunctionDec lst -> FunctionDec ($1::lst) :: t
                       | _ -> (FunctionDec [$1]) :: $2
       }

TypeDec: TYPE ID EQ TypeDefinition { {name=symbol $2; ty=$4; pos=(getPos parseState 1)} }

TypeDefinition: ID { NameTy (symbol $1, getPos parseState 1) }
              | LBRACE TypeFieldList RBRACE { RecordTy($2) }
              | ARRAY OF TypeId { ArrayTy(symbol $3, getPos parseState 3) }

TypeFieldList: { [] }
             | ID COLON TypeId { [ {name=symbol $1; escape=ref true; typ=symbol $3; pos=(getPos parseState 1)} ] }
             | TypeFieldList COMMA ID COLON TypeId { {name=symbol $3; escape=ref true; typ=symbol $5; pos=(getPos parseState 3)} :: $1 }

VarDec: VAR ID ASSIGN Expr { VarDec {name=symbol $2; escape=ref true; typ=None; init=$4; pos=(getPos parseState 2)} }
      | VAR ID COLON ID ASSIGN Expr { VarDec {name=symbol $2; escape=ref true; typ=Some (symbol $4, getPos parseState 4); init=$6; pos=(getPos parseState 2)} }

FuncDec: FUNCTION ID LPAREN TypeFieldList RPAREN EQ Expr { {name=symbol $2; param=$4; result=None; body=$7; pos=(getPos parseState 1)} }
       | FUNCTION ID LPAREN TypeFieldList RPAREN COLON ID EQ Expr { {name=symbol $2; param=$4; result=Some (symbol $7, getPos parseState 7); body=$9; pos=(getPos parseState 1)} }
