%{
open Ast
%}

// Token definitions

%start start
%token TYPE VAR FUNCTION INT STRING ARRAY OF NIL LET IN END IF THEN ELSE WHILE DO FOR TO BREAK
%token LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET DOT COMMA COLON SEMICOLON
%token PLUS MINUS TIMES DIV ASSIGN EQ NE GT LT GE LE AND OR

// Tokens associated with types
%token <string> ID
%token <string> STRING_LIT
%token <System.Int32> INT_LIT

%token EOF

// Means whole program is just an expression
%type < Ast.Expr > start

// Operator priority
%left ASSIGN
%left OR
%left AND
%nonassoc EQ NE LT LE GT GE
%left PLUS MINUS
%left TIMES DIV

%nonassoc THEN
%nonassoc ELSE
%nonassoc DO

%nonassoc LPAREN RPAREN

%%

// Grammer rules

start: Expr EOF { $1 }

BinOp: PLUS { Plus }
     | MINUS { Minus }
     | TIMES { Times }
     | DIV { Divide }
     | EQ { Eq }
     | NE { Ne }
     | GT { Gt }
     | GE { Ge }
     | LT { Lt }
     | LE { Le }
     | AND { And }
     | OR { Or }

LValue: ID { LIdent($1) }
      | LValue DOT ID { LRecField($1, $3) }
      | ID LBRACKET Expr RBRACKET { LArrSubscript($1, $3) }

TypeId: ID { $1 }
      | INT { "int" }
      | STRING { "string" }

Expr: STRING_LIT { StrLitExpr($1) }
    | INT_LIT { IntLitExpr($1) }
    | NIL { NilExpr }
    | LPAREN RPAREN { UnitExpr }
    | LPAREN Expr RPAREN { $2 }
    | LValue { LValueExpr($1) }
    | MINUS Expr %prec TIMES { NegExpr($2) }
    | Expr BinOp Expr %prec PLUS { BinExpr($1, $2, $3) }
    | LValue ASSIGN Expr { AssignExpr($1, $3) }
    | ID LPAREN ExprList RPAREN { CallExpr($1, List.rev($3)) }
    | LPAREN ExprSeq RPAREN { SeqExpr($2) }
    | ID LBRACE FieldList RBRACE { RecExpr($1, List.rev($3)) }
    | ID LBRACKET Expr RBRACKET OF Expr %prec ASSIGN { ArrExpr($1, $3, $6) }
    | IF Expr THEN Expr ELSE Expr { CondExpr($2, $4, Some $6) }
    | IF Expr THEN Expr { CondExpr($2, $4, None) }
    | WHILE Expr DO Expr { WhileExpr($2, $4) }
    | FOR ID ASSIGN Expr TO Expr DO Expr { ForExpr( $2, $4, $6, $8 ) }
    | BREAK { BreakExpr }
    | LET DecList IN Expr END { LetExpr( $2, $4 ) }

ExprList: { [] }
        | Expr { [ $1 ] }
        | ExprList COMMA Expr { $3 :: $1 }

ExprSeq: Expr SEMICOLON Expr { [ $3; $1 ] }
       | ExprSeq SEMICOLON Expr { $3 :: $1 }

FieldList: { [] }
         | ID EQ Expr { [($1, $3)] }
         | FieldList COMMA ID EQ Expr { ($3, $5) :: $1 }

DecList: Dec { [$1] }
       | DecList Dec { $2 :: $1 }

Dec: TypeDec { TDec($1) }
   | VarDec { VDec($1) }
   | FuncDec { FDec($1) }

TypeDec: TYPE TypeId EQ TypeDefinition { TypeDec($2, $4) }

TypeDefinition: TypeId { TypeAliasDec($1) }
              | LBRACE TypeFieldList RBRACE { RecordDec(List.rev($2)) }
              | ARRAY OF TypeId { ArrayDec($3) }

TypeFieldList: { [] }
             | ID COLON TypeId { [($1, $3)] }
             | TypeFieldList COMMA ID COLON TypeId { ($3, $5) :: $1 }

VarDec: VAR ID ASSIGN Expr { VariableDec($2, $4) }
      | VAR ID COLON TypeId ASSIGN Expr { VarWithTypeDec($2, $4, $6) }

FuncDec: FUNCTION ID LPAREN TypeFieldList RPAREN EQ Expr { FunctionDec($2, List.rev($4), $7) }
       | FUNCTION ID LPAREN TypeFieldList RPAREN COLON TypeId EQ Expr { FuncWithTypeDec($2, List.rev($4), $7, $9) }
